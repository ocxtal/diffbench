#! /usr/bin/env python
# encoding: utf-8

'''
@file wscript

@brief waf build script for x86_64 SIMD intrinsic macros.

@detail
This file serves as a SIMD capability checker. The configure function
is called from the wscript at the upper directory, checks the capability
of SSE4 and AVX2 instructions, sets the environments according to the 
result. The build function does nothing, since there is no source file
to be compiled in this directory.
'''

def options(opt):
	pass

def configure(conf):
	from waflib.Tools.compiler_c import c_compiler
	from itertools import product

	conf.env.SIMD_VARIANTS = []

	# first check if AVX2 instructions are available
	if(conf.check_cc(fragment='''
		#include <stdio.h>
		#include <immintrin.h>
		int main(void) {
			volatile __m256i a = _mm256_add_epi8(
				_mm256_setzero_si256(),
				_mm256_setzero_si256());
			return 0;
		}
		''',
		execute = True,
		cflags = '-mcore-avx2',
		mandatory = False,
		msg = 'Checking for AVX2 instructions',
		define_name = 'HAVE_AVX2')):
		conf.env.SIMD_VARIANTS += [
			[['ARCH', 'AVX'], ['BIT_WIDTH', 8], ['BAND_WIDTH', 16]],	# alias to SSE4, bit=8 and cell=16
			[['ARCH', 'AVX'], ['BIT_WIDTH', 8], ['BAND_WIDTH', 32]],
			[['ARCH', 'AVX'], ['BIT_WIDTH', 16], ['BAND_WIDTH', 16]],
			[['ARCH', 'AVX'], ['BIT_WIDTH', 16], ['BAND_WIDTH', 32]]]
		# sse4.1 instructions are also available on the avx2 enabled machines.
		if conf.env.CC_NAME == 'icc':
			conf.env.append_value('CFLAGS', '-axcore-avx2')
		else:
			conf.env.append_value('CFLAGS', '-mcore-avx2')

	# next, check if SSE4 instructions are availavle.
	if(conf.check_cc(fragment='''
		#include <stdio.h>
		#include <smmintrin.h>
		int main(void) {
			volatile __m128i a = _mm_add_epi8(
				_mm_setzero_si128(),
				_mm_insert_epi8(a, 1, 0));
			return 0;
		}
		''',
		execute = True,
		cflags = '-msse4.1',
		mandatory = False,
		msg = 'Checking for SSE4.1 instructions',
		define_name = 'HAVE_SSE4')):
		conf.env.SIMD_VARIANTS += [
			[['ARCH', 'SSE'], ['BIT_WIDTH', 8], ['BAND_WIDTH', 16]],
			[['ARCH', 'SSE'], ['BIT_WIDTH', 8], ['BAND_WIDTH', 32]],
			[['ARCH', 'SSE'], ['BIT_WIDTH', 16], ['BAND_WIDTH', 16]],
			[['ARCH', 'SSE'], ['BIT_WIDTH', 16], ['BAND_WIDTH', 32]]]
		if 'HAVE_AVX2=1' not in conf.env.DEFINES:
			if conf.env.CC_NAME == 'icc':
				conf.env.append_value('CFLAGS', '-axsse4.1')
			else:
				conf.env.append_value('CFLAGS', '-msse4.1')

def build(bld):
	pass

def shutdown(ctx):
	pass
